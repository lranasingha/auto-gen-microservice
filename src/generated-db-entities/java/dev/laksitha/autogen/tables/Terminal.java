/*
 * This file is generated by jOOQ.
 */
package dev.laksitha.autogen.tables;


import dev.laksitha.autogen.Indexes;
import dev.laksitha.autogen.Keys;
import dev.laksitha.autogen.Public;
import dev.laksitha.autogen.tables.records.TerminalRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Terminal extends TableImpl<TerminalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.terminal</code>
     */
    public static final Terminal TERMINAL = new Terminal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TerminalRecord> getRecordType() {
        return TerminalRecord.class;
    }

    /**
     * The column <code>public.terminal.id</code>.
     */
    public final TableField<TerminalRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.terminal.name</code>.
     */
    public final TableField<TerminalRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.terminal.description</code>.
     */
    public final TableField<TerminalRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>public.terminal.status</code>.
     */
    public final TableField<TerminalRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    private Terminal(Name alias, Table<TerminalRecord> aliased) {
        this(alias, aliased, null);
    }

    private Terminal(Name alias, Table<TerminalRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.terminal</code> table reference
     */
    public Terminal(String alias) {
        this(DSL.name(alias), TERMINAL);
    }

    /**
     * Create an aliased <code>public.terminal</code> table reference
     */
    public Terminal(Name alias) {
        this(alias, TERMINAL);
    }

    /**
     * Create a <code>public.terminal</code> table reference
     */
    public Terminal() {
        this(DSL.name("terminal"), null);
    }

    public <O extends Record> Terminal(Table<O> child, ForeignKey<O, TerminalRecord> key) {
        super(child, key, TERMINAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TERMINAL_NAME);
    }

    @Override
    public UniqueKey<TerminalRecord> getPrimaryKey() {
        return Keys.TERMINAL_PKEY;
    }

    @Override
    public Terminal as(String alias) {
        return new Terminal(DSL.name(alias), this);
    }

    @Override
    public Terminal as(Name alias) {
        return new Terminal(alias, this);
    }

    @Override
    public Terminal as(Table<?> alias) {
        return new Terminal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Terminal rename(String name) {
        return new Terminal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Terminal rename(Name name) {
        return new Terminal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Terminal rename(Table<?> name) {
        return new Terminal(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
